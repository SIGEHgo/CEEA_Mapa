addTiles()
for (x in seq_along(columnas_interes)) {
col_actual = columnas_interes[x]
print(col_actual)
colores = getColor(datos_mapa[[col_actual]])
colores_localidad = getColor(loc_map[[col_actual]])
icons = awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = colores
)
mapa_web = mapa_web  |>
addAwesomeMarkers(
data = datos_mapa,
label = datos_mapa$f_abast,
popup = paste(
"Municipio:", "<b>", datos_mapa$NOM_MUN, "</b>",
"<br>Localidad:", "<b>", datos_mapa$LOC, "</b>",
"<br>Fuente de Abastecimiento:", "<b>", datos_mapa$f_abast, "</b>",
"<br>", columnas_completas[x], ": <b>", ifelse(test = is.na(datos_mapa[[col_actual]]), yes = "No hay dato", no = datos_mapa[[col_actual]]), "</b>"),
icon = icons,
clusterOptions = markerClusterOptions(),
group = columnas_completas[x]
) |>
addPolygons(data = loc_map, label = loc_map$NOMGEO_LOC, color = "black", fillColor = colores_localidad, fillOpacity = 0.1, weight = 1, group = columnas_completas[x])
}
mapa_web = mapa_web |>
addLayersControl(baseGroups = columnas_completas, options = layersControlOptions(collapsed = F)) |>
addLegend("bottomleft", colors = c('green', 'orange', 'red', 'gray'), values = datos_mapa$as,
title = "Simbología",
labels = c("Bueno", "Medio", "Malo", "No hay dato"),
opacity = 1)
mapa_web = mapa_web |>
addPolygons(data = municipios, label = municipios$NOM_MUN, fillColor = "gray", color = "gray", fillOpacity = 0.1, opacity = 1,weight = 0.5) #|>
mapa_web
todos_mapas[[i]] = mapa_web
}
anios = datos_mapa$AÑO |>  unique()
guardo = datos_mapa
todos_mapas = list()
for (i in seq_along(anios)) {
library(leaflet)
datos_mapa = guardo
datos_mapa = datos_mapa |>
dplyr::filter(AÑO == anios[i])
loc_map = datos_mapa |>
sf::st_drop_geometry() |>
dplyr::group_by(CVEGEO_LOC) |>
dplyr::summarise(dplyr::across(as:temp, mean, na.rm = TRUE))
loc_geometry = datos |>
dplyr::filter(AÑO == anios[i]) |>
dplyr::select(CVEGEO_LOC,NOMGEO_LOC,geometry) |>
dplyr::distinct(geometry, .keep_all = TRUE) # Filtrar geometria unica
loc_map = merge(x = loc_map, y = loc_geometry, by = "CVEGEO_LOC")
loc_map = sf::st_as_sf(x = loc_map, crs = sf::st_crs(datos))
loc_map = sf::st_transform(x = loc_map, crs = sf::st_crs(datos_mapa))
mapa_web = leaflet() |>
addTiles()
for (x in seq_along(columnas_interes)) {
col_actual = columnas_interes[x]
print(col_actual)
colores = getColor(datos_mapa[[col_actual]])
colores_localidad = getColor(loc_map[[col_actual]])
icons = awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = colores
)
mapa_web = mapa_web  |>
addAwesomeMarkers(
data = datos_mapa,
label = datos_mapa$f_abast,
popup = paste(
"Municipio:", "<b>", datos_mapa$NOM_MUN, "</b>",
"<br>Localidad:", "<b>", datos_mapa$LOC, "</b>",
"<br>Fuente de Abastecimiento:", "<b>", datos_mapa$f_abast, "</b>",
"<br>", columnas_completas[x], ": <b>", ifelse(test = is.na(datos_mapa[[col_actual]]), yes = "No hay dato", no = datos_mapa[[col_actual]]), "</b>"),
icon = icons,
clusterOptions = markerClusterOptions(),
group = columnas_completas[x]
) |>
addPolygons(data = loc_map, label = loc_map$NOMGEO_LOC, color = "black", fillColor = colores_localidad, fillOpacity = 0.1, weight = 1, group = columnas_completas[x])
}
mapa_web = mapa_web |>
addLayersControl(baseGroups = columnas_completas, options = layersControlOptions(collapsed = F)) |>
addLegend("bottomleft", colors = c('green', 'orange', 'red', 'gray'), values = datos_mapa$as,
title = "Simbología",
labels = c("Bueno", "Medio", "Malo", "No hay dato"),
opacity = 1)
mapa_web = mapa_web |>
addPolygons(data = municipios, label = municipios$NOM_MUN, fillColor = "gray", color = "gray", fillOpacity = 0.1, opacity = 1,weight = 0.5) #|>
mapa_web
todos_mapas[[i]] = mapa_web
}
seq_along(anios)
anios
anios = datos$AÑO |>  unique()
guardo = datos_mapa
todos_mapas = list()
for (i in seq_along(anios)) {
library(leaflet)
datos_mapa = guardo
datos_mapa = datos_mapa |>
dplyr::filter(AÑO == anios[i])
loc_map = datos_mapa |>
sf::st_drop_geometry() |>
dplyr::group_by(CVEGEO_LOC) |>
dplyr::summarise(dplyr::across(as:temp, mean, na.rm = TRUE))
loc_geometry = datos |>
dplyr::filter(AÑO == anios[i]) |>
dplyr::select(CVEGEO_LOC,NOMGEO_LOC,geometry) |>
dplyr::distinct(geometry, .keep_all = TRUE) # Filtrar geometria unica
loc_map = merge(x = loc_map, y = loc_geometry, by = "CVEGEO_LOC")
loc_map = sf::st_as_sf(x = loc_map, crs = sf::st_crs(datos))
loc_map = sf::st_transform(x = loc_map, crs = sf::st_crs(datos_mapa))
mapa_web = leaflet() |>
addTiles()
for (x in seq_along(columnas_interes)) {
col_actual = columnas_interes[x]
print(col_actual)
colores = getColor(datos_mapa[[col_actual]])
colores_localidad = getColor(loc_map[[col_actual]])
icons = awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = colores
)
mapa_web = mapa_web  |>
addAwesomeMarkers(
data = datos_mapa,
label = datos_mapa$f_abast,
popup = paste(
"Municipio:", "<b>", datos_mapa$NOM_MUN, "</b>",
"<br>Localidad:", "<b>", datos_mapa$LOC, "</b>",
"<br>Fuente de Abastecimiento:", "<b>", datos_mapa$f_abast, "</b>",
"<br>", columnas_completas[x], ": <b>", ifelse(test = is.na(datos_mapa[[col_actual]]), yes = "No hay dato", no = datos_mapa[[col_actual]]), "</b>"),
icon = icons,
clusterOptions = markerClusterOptions(),
group = columnas_completas[x]
) |>
addPolygons(data = loc_map, label = loc_map$NOMGEO_LOC, color = "black", fillColor = colores_localidad, fillOpacity = 0.1, weight = 1, group = columnas_completas[x])
}
mapa_web = mapa_web |>
addLayersControl(baseGroups = columnas_completas, options = layersControlOptions(collapsed = F)) |>
addLegend("bottomleft", colors = c('green', 'orange', 'red', 'gray'), values = datos_mapa$as,
title = "Simbología",
labels = c("Bueno", "Medio", "Malo", "No hay dato"),
opacity = 1)
mapa_web = mapa_web |>
addPolygons(data = municipios, label = municipios$NOM_MUN, fillColor = "gray", color = "gray", fillOpacity = 0.1, opacity = 1,weight = 0.5) #|>
mapa_web
todos_mapas[[i]] = mapa_web
}
datos = sf::read_sf("app/assets/Datos/Datos_2012_2023_shp/Datos_2012_2023_prueba.shp")
datos_mapa = datos |>  sf::st_centroid(datos)
anios = datos_mapa$AÑO |>  unique()
guardo = datos_mapa
todos_mapas = list()
for (i in seq_along(anios)) {
library(leaflet)
datos_mapa = guardo
datos_mapa = datos_mapa |>
dplyr::filter(AÑO == anios[i])
loc_map = datos_mapa |>
sf::st_drop_geometry() |>
dplyr::group_by(CVEGEO_LOC) |>
dplyr::summarise(dplyr::across(as:temp, mean, na.rm = TRUE))
loc_geometry = datos |>
dplyr::filter(AÑO == anios[i]) |>
dplyr::select(CVEGEO_LOC,NOMGEO_LOC,geometry) |>
dplyr::distinct(geometry, .keep_all = TRUE) # Filtrar geometria unica
loc_map = merge(x = loc_map, y = loc_geometry, by = "CVEGEO_LOC")
loc_map = sf::st_as_sf(x = loc_map, crs = sf::st_crs(datos))
loc_map = sf::st_transform(x = loc_map, crs = sf::st_crs(datos_mapa))
mapa_web = leaflet() |>
addTiles()
for (x in seq_along(columnas_interes)) {
col_actual = columnas_interes[x]
print(col_actual)
colores = getColor(datos_mapa[[col_actual]])
colores_localidad = getColor(loc_map[[col_actual]])
icons = awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = colores
)
mapa_web = mapa_web  |>
addAwesomeMarkers(
data = datos_mapa,
label = datos_mapa$f_abast,
popup = paste(
"Municipio:", "<b>", datos_mapa$NOM_MUN, "</b>",
"<br>Localidad:", "<b>", datos_mapa$LOC, "</b>",
"<br>Fuente de Abastecimiento:", "<b>", datos_mapa$f_abast, "</b>",
"<br>", columnas_completas[x], ": <b>", ifelse(test = is.na(datos_mapa[[col_actual]]), yes = "No hay dato", no = datos_mapa[[col_actual]]), "</b>"),
icon = icons,
clusterOptions = markerClusterOptions(),
group = columnas_completas[x]
) |>
addPolygons(data = loc_map, label = loc_map$NOMGEO_LOC, color = "black", fillColor = colores_localidad, fillOpacity = 0.1, weight = 1, group = columnas_completas[x])
}
mapa_web = mapa_web |>
addLayersControl(baseGroups = columnas_completas, options = layersControlOptions(collapsed = F)) |>
addLegend("bottomleft", colors = c('green', 'orange', 'red', 'gray'), values = datos_mapa$as,
title = "Simbología",
labels = c("Bueno", "Medio", "Malo", "No hay dato"),
opacity = 1)
mapa_web = mapa_web |>
addPolygons(data = municipios, label = municipios$NOM_MUN, fillColor = "gray", color = "gray", fillOpacity = 0.1, opacity = 1,weight = 0.5) #|>
mapa_web
todos_mapas[[i]] = mapa_web
}
getColor = function(columna) {
sapply(columna, function(x) {
if (is.na(x)) {
"gray"
} else if (x >= inferior && x <= superior) {
"green"
} else if (x > superior) {
"red"
} else {
"gray"
}
})
}
anios = datos_mapa$AÑO |>  unique()
guardo = datos_mapa
todos_mapas = list()
for (i in seq_along(anios)) {
library(leaflet)
datos_mapa = guardo
datos_mapa = datos_mapa |>
dplyr::filter(AÑO == anios[i])
loc_map = datos_mapa |>
sf::st_drop_geometry() |>
dplyr::group_by(CVEGEO_LOC) |>
dplyr::summarise(dplyr::across(as:temp, mean, na.rm = TRUE))
loc_geometry = datos |>
dplyr::filter(AÑO == anios[i]) |>
dplyr::select(CVEGEO_LOC,NOMGEO_LOC,geometry) |>
dplyr::distinct(geometry, .keep_all = TRUE) # Filtrar geometria unica
loc_map = merge(x = loc_map, y = loc_geometry, by = "CVEGEO_LOC")
loc_map = sf::st_as_sf(x = loc_map, crs = sf::st_crs(datos))
loc_map = sf::st_transform(x = loc_map, crs = sf::st_crs(datos_mapa))
inferior = limite_inferior[i]
superior = limite_superior[i]
getColor = function(columna) {
sapply(columna, function(x) {
if (is.na(x)) {
"gray"
} else if (x >= inferior && x <= superior) {
"green"
} else if (x > superior) {
"red"
} else {
"gray"
}
})
}
mapa_web = leaflet() |>
addTiles()
for (x in seq_along(columnas_interes)) {
col_actual = columnas_interes[x]
print(col_actual)
colores = getColor(datos_mapa[[col_actual]])
colores_localidad = getColor(loc_map[[col_actual]])
icons = awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = colores
)
mapa_web = mapa_web  |>
addAwesomeMarkers(
data = datos_mapa,
label = datos_mapa$f_abast,
popup = paste(
"Municipio:", "<b>", datos_mapa$NOM_MUN, "</b>",
"<br>Localidad:", "<b>", datos_mapa$LOC, "</b>",
"<br>Fuente de Abastecimiento:", "<b>", datos_mapa$f_abast, "</b>",
"<br>", columnas_completas[x], ": <b>", ifelse(test = is.na(datos_mapa[[col_actual]]), yes = "No hay dato", no = datos_mapa[[col_actual]]), "</b>"),
icon = icons,
clusterOptions = markerClusterOptions(),
group = columnas_completas[x]
) |>
addPolygons(data = loc_map, label = loc_map$NOMGEO_LOC, color = "black", fillColor = colores_localidad, fillOpacity = 0.1, weight = 1, group = columnas_completas[x]) |>
addLayersControl(baseGroups = columnas_completas, options = layersControlOptions(collapsed = F)) |>
addLegend("bottomleft", colors = c('green', 'red', 'gray'), values = datos_mapa[[col_actual]],
title = columnas_completas[x],
labels = c(paste("<=", superior), "Malo", "No hay dato"),
opacity = 1,
group = columnas_completas[x])
}
mapa_web = mapa_web |>
addPolygons(data = municipios, label = municipios$NOM_MUN, fillColor = "gray", color = "gray", fillOpacity = 0.1, opacity = 1,weight = 0.5) #|>
mapa_web
todos_mapas[[i]] = mapa_web
}
datos = sf::read_sf("app/assets/Datos/Datos_2012_2023_shp/Datos_2012_2023_prueba.shp")
datos_mapa = datos |>  sf::st_centroid(datos)
columnas_interes = names(datos_mapa)[9:29]
columnas_completas =  c(
"Arsénico",
"Bario",
"Cadmio",
"Cobre",
"Hierro",
"Manganeso",
"Plomo",
"Zinc",
"Cianuros",
"Cloro residual",
"Cloruros",
"Dureza total",
"Fluoruros",
"Nitratos",
"Nitritos",
"pH",
"Sólidos disueltos totales",
"Sulfatos",
"Cloro total",
"Conductividad",
"Temperatura"
)
# Extras para el mapa
municipios = sf::read_sf("../../Importantes_documentos_usar/Municipios/municipiosjair.shp")
# Paleta de colores
limite_inferior = c(0,0,0,0,0,0,0,0,0,0.2,0,0,0,0,0,6.5,0,0,0,0,0)
limite_superior = c(0.025, 1.3, 0.005, 2.0, 0.3, 0.15, 0.01, 5.0, 0.07, 1.5, 250, 500, 1.5, 11, 0.9, 8.5, 1000, 400, 1.1111, 2000, 25)
anios = datos_mapa$AÑO |>  unique()
guardo = datos_mapa
todos_mapas = list()
for (i in seq_along(anios)) {
library(leaflet)
datos_mapa = guardo
datos_mapa = datos_mapa |>
dplyr::filter(AÑO == anios[i])
loc_map = datos_mapa |>
sf::st_drop_geometry() |>
dplyr::group_by(CVEGEO_LOC) |>
dplyr::summarise(dplyr::across(as:temp, mean, na.rm = TRUE))
loc_geometry = datos |>
dplyr::filter(AÑO == anios[i]) |>
dplyr::select(CVEGEO_LOC,NOMGEO_LOC,geometry) |>
dplyr::distinct(geometry, .keep_all = TRUE) # Filtrar geometria unica
loc_map = merge(x = loc_map, y = loc_geometry, by = "CVEGEO_LOC")
loc_map = sf::st_as_sf(x = loc_map, crs = sf::st_crs(datos))
loc_map = sf::st_transform(x = loc_map, crs = sf::st_crs(datos_mapa))
inferior = limite_inferior[i]
superior = limite_superior[i]
getColor = function(columna) {
sapply(columna, function(x) {
if (is.na(x)) {
"gray"
} else if (x >= inferior && x <= superior) {
"green"
} else if (x > superior) {
"red"
} else {
"gray"
}
})
}
mapa_web = leaflet() |>
addTiles()
for (x in seq_along(columnas_interes)) {
col_actual = columnas_interes[x]
print(col_actual)
colores = getColor(datos_mapa[[col_actual]])
colores_localidad = getColor(loc_map[[col_actual]])
icons = awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = colores
)
mapa_web = mapa_web  |>
addAwesomeMarkers(
data = datos_mapa,
label = datos_mapa$f_abast,
popup = paste(
"Municipio:", "<b>", datos_mapa$NOM_MUN, "</b>",
"<br>Localidad:", "<b>", datos_mapa$LOC, "</b>",
"<br>Fuente de Abastecimiento:", "<b>", datos_mapa$f_abast, "</b>",
"<br>", columnas_completas[x], ": <b>", ifelse(test = is.na(datos_mapa[[col_actual]]), yes = "No hay dato", no = datos_mapa[[col_actual]]), "</b>"),
icon = icons,
clusterOptions = markerClusterOptions(),
group = columnas_completas[x]
) |>
addPolygons(data = loc_map, label = loc_map$NOMGEO_LOC, color = "black", fillColor = colores_localidad, fillOpacity = 0.1, weight = 1, group = columnas_completas[x]) |>
addLayersControl(baseGroups = columnas_completas, options = layersControlOptions(collapsed = F)) |>
addLegend("bottomleft", colors = c('green', 'red', 'gray'), values = datos_mapa[[col_actual]],
title = columnas_completas[x],
labels = c(paste("<=", superior), "Malo", "No hay dato"),
opacity = 1,
group = columnas_completas[x])
}
mapa_web = mapa_web |>
addPolygons(data = municipios, label = municipios$NOM_MUN, fillColor = "gray", color = "gray", fillOpacity = 0.1, opacity = 1,weight = 0.5) #|>
mapa_web
todos_mapas[[i]] = mapa_web
}
todos_mapas[[1]]
datos = sf::read_sf("app/assets/Datos/Datos_2012_2023_shp/Datos_2012_2023_prueba.shp")
datos_mapa = datos |>  sf::st_centroid(datos)
columnas_interes = names(datos_mapa)[9:29]
columnas_completas =  c(
"Arsénico",
"Bario",
"Cadmio",
"Cobre",
"Hierro",
"Manganeso",
"Plomo",
"Zinc",
"Cianuros",
"Cloro residual",
"Cloruros",
"Dureza total",
"Fluoruros",
"Nitratos",
"Nitritos",
"pH",
"Sólidos disueltos totales",
"Sulfatos",
"Cloro total",
"Conductividad",
"Temperatura"
)
# Extras para el mapa
municipios = sf::read_sf("../../Importantes_documentos_usar/Municipios/municipiosjair.shp")
# Paleta de colores
limite_inferior = c(0,0,0,0,0,0,0,0,0,0.2,0,0,0,0,0,6.5,0,0,0,0,0)
limite_superior = c(0.025, 1.3, 0.005, 2.0, 0.3, 0.15, 0.01, 5.0, 0.07, 1.5, 250, 500, 1.5, 11, 0.9, 8.5, 1000, 400, 1.1111, 2000, 25)
anios = datos_mapa$AÑO |>  unique()
guardo = datos_mapa
todos_mapas = list()
for (i in seq_along(anios)) {
library(leaflet)
datos_mapa = guardo
datos_mapa = datos_mapa |>
dplyr::filter(AÑO == anios[i])
loc_map = datos_mapa |>
sf::st_drop_geometry() |>
dplyr::group_by(CVEGEO_LOC) |>
dplyr::summarise(dplyr::across(as:temp, mean, na.rm = TRUE))
loc_geometry = datos |>
dplyr::filter(AÑO == anios[i]) |>
dplyr::select(CVEGEO_LOC,NOMGEO_LOC,geometry) |>
dplyr::distinct(geometry, .keep_all = TRUE) # Filtrar geometria unica
loc_map = merge(x = loc_map, y = loc_geometry, by = "CVEGEO_LOC")
loc_map = sf::st_as_sf(x = loc_map, crs = sf::st_crs(datos))
loc_map = sf::st_transform(x = loc_map, crs = sf::st_crs(datos_mapa))
mapa_web = leaflet() |>
addTiles()
for (x in seq_along(columnas_interes)) {
col_actual = columnas_interes[x]
print(col_actual)
inferior = limite_inferior[x]
superior = limite_superior[x]
getColor = function(columna) {
sapply(columna, function(x) {
if (is.na(x)) {
"gray"
} else if (x >= inferior && x <= superior) {
"green"
} else if (x > superior) {
"red"
} else {
"gray"
}
})
}
colores = getColor(datos_mapa[[col_actual]])
colores_localidad = getColor(loc_map[[col_actual]])
icons = awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = colores
)
mapa_web = mapa_web  |>
addAwesomeMarkers(
data = datos_mapa,
label = datos_mapa$f_abast,
popup = paste(
"Municipio:", "<b>", datos_mapa$NOM_MUN, "</b>",
"<br>Localidad:", "<b>", datos_mapa$LOC, "</b>",
"<br>Fuente de Abastecimiento:", "<b>", datos_mapa$f_abast, "</b>",
"<br>", columnas_completas[x], ": <b>", ifelse(test = is.na(datos_mapa[[col_actual]]), yes = "No hay dato", no = datos_mapa[[col_actual]]), "</b>"),
icon = icons,
clusterOptions = markerClusterOptions(),
group = columnas_completas[x]
) |>
addPolygons(data = loc_map, label = loc_map$NOMGEO_LOC, color = "black", fillColor = colores_localidad, fillOpacity = 0.1, weight = 1, group = columnas_completas[x]) |>
addLayersControl(baseGroups = columnas_completas, options = layersControlOptions(collapsed = F)) |>
addLegend("bottomleft", colors = c('green', 'red', 'gray'), values = datos_mapa[[col_actual]],
title = columnas_completas[x],
labels = c(paste("<=", superior), "Malo", "No hay dato"),
opacity = 1,
group = columnas_completas[x])
}
mapa_web = mapa_web |>
addPolygons(data = municipios, label = municipios$NOM_MUN, fillColor = "gray", color = "gray", fillOpacity = 0.1, opacity = 1,weight = 0.5) #|>
mapa_web
todos_mapas[[i]] = mapa_web
}
todos_mapas[[1]]
